scalar Date

type Friend {
  id: String!
  user: User!
  followingUser: User!
  isFriend: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

type FriendRequest {
  id: String!
  user: User!
  followingUser: User!
  friendRequestStatus: FriendRequestStatus!
  createdAt: Date!
  updatedAt: Date!
}

type FriendRequestResponse {
  total: Int!
  requests: [FriendRequest!]!
}

type UserFriendResponse {
  total: Int!
  friends: [Friend!]!
}

type UserFollowingResponse {
  total: Int!
  following: [Friend!]!
}

type UserFollowerResponse {
  total: Int!
  followers: [Friend!]!
}

input FriendUnfriendInput {
  followingUserId: String!
  isFriend: Boolean!
}

input FollowUserInput {
  followingUserId: String!
}

input UnFollowUserInput {
  followingUserId: String!
}

enum FriendRequestStatus {
  ACCEPTED
  REJECTED
  PENDING
}

type Query {
  getFriendRequests: FriendRequestResponse!
  getUserFriends(username: String!): UserFriendResponse!
  getUserFollowers(username: String!): UserFollowerResponse!
  getUserFollowing(username: String!): UserFollowingResponse!
}

type Mutation {
  withdrawFriendRequest(friendUserId: String!): String!
  followUser(followUserInput: FollowUserInput!): String!
  unFollowUser(unFollowUserInput: UnFollowUserInput!): String!
  friendUnfriendAUser(friendUnfriendInput: FriendUnfriendInput!): String!
  handleFriendRequest(friendUserId: String!, status: FriendRequestStatus!): String!
}
