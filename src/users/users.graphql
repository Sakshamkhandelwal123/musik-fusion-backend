scalar Date

type User {
  id: String!
  firstName: String!
  lastName: String!
  username: String
  profileImage: String
  email: String!
  isEmailVerified: Boolean!
  phoneNumber: String
  createdAt: Date!
  updatedAt: Date!
}

type SignInResponse {
  user: User!
  accessToken: String!
  expiresIn: Int!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input VerifyEmailInput {
  email: String!
  otp: Int!
}

input VerifyNewPasswordInput {
  email: String!
  otp: Int!
  newPassword: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  username: String
  phoneNumber: String
}

type Query {
  me: User!
  getUserByUsername(username: String!): User!
}

type Mutation {
  resetPassword: String!
  forgotPassword(email: String!): String!
  signUp(signUpInput: SignUpInput!): String!
  resendVerificationEmail(email: String!): String! 
  signIn(signInInput: SignInInput!): SignInResponse!
  verifyEmail(verifyEmailInput: VerifyEmailInput!): String!
  verifyNewPassword(verifyNewPasswordInput: VerifyNewPasswordInput!): String!
  updateUserProfile(updateUserInput: UpdateUserInput!): String!
  deleteUserAccount(username: String!): String!
}
